version: '3.9'

services:
  traefik:
    build:
      context: ./traefik
    container_name: traefik
    security_opt:
      - no-new-privileges:true
    command:
        - --certificatesresolvers.letsencrypt.acme.email=${EMAIL}
        # - --pilot.token=${PILOT_TOKEN}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik_data:/etc/traefik/acme:z
      - ./traefik/log:/var/log/traefik
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml
      - ./traefik/dynamic:/etc/traefik/dynamic
      # - /etc/localtime:/etc/localtime:ro
    env_file: .env

    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=front"
      # - "traefik.port=8080"
      # - "traefik.backend=traefik"

      # Rules and middlewares asociation with entrypoints
      # - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      # - "traefik.http.routers.http-catchall.entrypoints=web"
      # - "traefik.http.routers.http-catchall.middlewares=redirect-to-https,security-headers@file"
      # - "traefik.http.routers.https-catchall.rule=hostregexp(`{host:.+}`)"
      # - "traefik.http.routers.https-catchall.entrypoints=websecure"
      # - "traefik.http.routers.https-catchall.middlewares=custom-redirect,security-headers@file"

      # Secure Dashboard (http basic auth)
      - "traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_DASHBOARD}.${DOMAIN}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.middlewares=www-to-nonwww,security-headers@file,dashboard-auth"
      # Dashboard auth
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=${DASHBOARD_LOG_PSW}"
      # Redirect from www to non-www and http to https
      # - "traefik.http.middlewares.custom-redirect.redirectregex.regex=^https?://(www.)?(.*)"
      # - "traefik.http.middlewares.custom-redirect.redirectregex.replacement=https://$${2}"
      # - "traefik.http.middlewares.custom-redirect.redirectregex.permanent=true"
      # Redirect 301 to https Middleware
      # - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # - "traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true"
      # # Security headers middleware
      # - "traefik.http.middlewares.security-headers.headers.browserXssFilter=true"
      # - "traefik.http.middlewares.security-headers.headers.contentTypeNosniff=true"
      # - "traefik.http.middlewares.security-headers.headers.frameDeny=true"
      # - "traefik.http.middlewares.security-headers.headers.sslRedirect=true"
      # - "traefik.http.middlewares.security-headers.headers.hostsProxyHeaders=['X-CSRFToken']"
      # #HSTS Configuration
      # - "traefik.http.middlewares.security-headers.headers.stsIncludeSubdomains=true"
      # - "traefik.http.middlewares.security-headers.headers.stsPreload=true"
      # - "traefik.http.middlewares.security-headers.headers.stsSeconds=31536000"
      # - "traefik.http.middlewares.security-headers.headers.forceSTSHeader=true"
      # gzip compression
      # - "traefik.http.middlewares.gzip.compress=true"

    restart: unless-stopped
    networks:
      - front

  prometheus:
    image: prom/prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules.yml:/etc/prometheus/rules.yml
      # - /etc/localtime:/etc/localtime:ro

volumes:
  traefik_data: {}
  prometheus_data: {}
  grafana_data: {}

networks:
  front:
    name: front
  back:
    name: back
